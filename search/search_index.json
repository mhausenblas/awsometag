{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"If you want to tag AWS resources via the CLI in a uniform manner, then awsometag might be just the tool you're looking for. Install it \u00b6 Install awsometag by downloading one of the binaries or, if you have Go 1.12+ installed, you can clone this repo and build it from source using make bin . Install on macOS For example, to install awsometag from binary on macOS you would do: 1 2 3 4 5 curl -L https://github.com/mhausenblas/awsometag/releases/latest/download/awsometag_darwin_amd64.tar.gz \\ -o awsometag.tar.gz && \\ tar xvzf awsometag.tar.gz awsometag && \\ mv awsometag /usr/local/bin && \\ rm awsometag* Supported platforms: Linux (both Intel and ARM) macOS Windows Use it \u00b6 The awsometag CLI tool takes two arguments: the ARN of the resource to tag, a list of comma-separated tags, each in the format key=value Hence, the general usage pattern for awsometag is: 1 $ awsometag RESOURCE_ARN \"TAG_KEY1=TAG_VAL1,TAG_KEY2=TAG_VAL2,...\" Supported resources \u00b6 Currently, awsometag supports tagging resources for the following services: Fundamental services: AWS Identity and Access Management: users roles Amazon Simple Storage Service: buckets objects AWS Lambda: functions Amazon DynamoDB: tables Amazon Elastic Compute Cloud: all resources Networking services: Elastic Load Balancing: Classic LBs ALBs NLBs Container services: Amazon Elastic Container Registry: repositories Amazon Elastic Container Service: capacity providers clusters tasks and task definitions services container instances Amazon Elastic Kubernetes Service: clusters managed node groups","title":"Overview"},{"location":"#install-it","text":"Install awsometag by downloading one of the binaries or, if you have Go 1.12+ installed, you can clone this repo and build it from source using make bin . Install on macOS For example, to install awsometag from binary on macOS you would do: 1 2 3 4 5 curl -L https://github.com/mhausenblas/awsometag/releases/latest/download/awsometag_darwin_amd64.tar.gz \\ -o awsometag.tar.gz && \\ tar xvzf awsometag.tar.gz awsometag && \\ mv awsometag /usr/local/bin && \\ rm awsometag* Supported platforms: Linux (both Intel and ARM) macOS Windows","title":"Install it"},{"location":"#use-it","text":"The awsometag CLI tool takes two arguments: the ARN of the resource to tag, a list of comma-separated tags, each in the format key=value Hence, the general usage pattern for awsometag is: 1 $ awsometag RESOURCE_ARN \"TAG_KEY1=TAG_VAL1,TAG_KEY2=TAG_VAL2,...\"","title":"Use it"},{"location":"#supported-resources","text":"Currently, awsometag supports tagging resources for the following services: Fundamental services: AWS Identity and Access Management: users roles Amazon Simple Storage Service: buckets objects AWS Lambda: functions Amazon DynamoDB: tables Amazon Elastic Compute Cloud: all resources Networking services: Elastic Load Balancing: Classic LBs ALBs NLBs Container services: Amazon Elastic Container Registry: repositories Amazon Elastic Container Service: capacity providers clusters tasks and task definitions services container instances Amazon Elastic Kubernetes Service: clusters managed node groups","title":"Supported resources"},{"location":"about/","text":"After reading and reflecting on Allocate AWS Costs with Resource Tags I asked myself: is there a CLI tool out there, ideally with a great UX, that allows me to tag any AWS resource in a uniform manner? After some searching around I concluded that the answer is likely \"No\" and so I set out to fill this gap with awsometag . But, I hear you say, there are AWS Resource Groups (ARG), already! Isn't this re-inventing the wheel? Nope. And the reason is two-fold: on the one hand, you can consider awsometag as a sort of enabler for ARGs; you don't have to think about the grouping aspect up-front, only tag your resources. Second, ARGs are very powerful, supporting more than simple tags, including CloudFormation stack-based queries and a set of permissions along with the ARG. In a sense, if one was to compare awsometag to ARGs, it would be offering functionality equivalent to a subset of the Tag Editor .","title":"About"},{"location":"containers/","text":"ECR \u00b6 To tag the ECR repo arn:aws:ecr:us-east-1:123456789102:repository/somerepo with my=containers , use the following: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 # tag: $ awsometag arn:aws:ecr:us-east-1:123456789102:repository/somerepo my = containers 2020 /01/05 09 :43:03 Tagging ECR repository 'somerepo' in region 'us-east-1' with my:containers # verify the tagging: $ aws ecr list-tags-for-resource \\ --resource-arn arn:aws:ecr:us-east-1:123456789102:repository/somerepo { \"tags\" : [ { \"Key\" : \"my\" , \"Value\" : \"containers\" } ] } ECS \u00b6 To tag the ECS task definition arn:aws:ecs:us-west-2:123456789102:task-definition/nginx:3 with my=containers , use the following: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 # tag: $ awsometag arn:aws:ecs:us-west-2:123456789102:task-definition/nginx:3 my = containers 2020 /01/05 13 :13:44 Tagging ECS task definition 'nginx:3' in region 'us-west-2' with my:containers # verify the tagging: $ aws ecs list-tags-for-resource \\ --resource-arn arn:aws:ecs:us-west-2:123456789102:task-definition/nginx:3 { \"tags\" : [ { \"key\" : \"some\" , \"value\" : \"thing\" } ] } EKS \u00b6 To tag the EKS cluster arn:aws:eks:us-west-2:123456789102:cluster/somecluster with my=containers , use the following: 1 2 3 4 5 6 7 8 9 10 11 12 # tag: $ awsometag arn:aws:eks:us-west-2:123456789102:cluster/somecluster my = containers 2020 /01/05 08 :26:03 Tagging EKS cluster 'somecluster' in region 'us-west-1' with my:containers # verify the tagging: $ aws eks list-tags-for-resource \\ --resource-arn arn:aws:eks:us-west-1:123456789102:cluster/somecluster { \"tags\" : { \"my\" : \"containers\" } } Note In the same way you can tag clusters, you can tag managed node groups part of a cluster.","title":"Containers"},{"location":"containers/#ecr","text":"To tag the ECR repo arn:aws:ecr:us-east-1:123456789102:repository/somerepo with my=containers , use the following: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 # tag: $ awsometag arn:aws:ecr:us-east-1:123456789102:repository/somerepo my = containers 2020 /01/05 09 :43:03 Tagging ECR repository 'somerepo' in region 'us-east-1' with my:containers # verify the tagging: $ aws ecr list-tags-for-resource \\ --resource-arn arn:aws:ecr:us-east-1:123456789102:repository/somerepo { \"tags\" : [ { \"Key\" : \"my\" , \"Value\" : \"containers\" } ] }","title":"ECR"},{"location":"containers/#ecs","text":"To tag the ECS task definition arn:aws:ecs:us-west-2:123456789102:task-definition/nginx:3 with my=containers , use the following: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 # tag: $ awsometag arn:aws:ecs:us-west-2:123456789102:task-definition/nginx:3 my = containers 2020 /01/05 13 :13:44 Tagging ECS task definition 'nginx:3' in region 'us-west-2' with my:containers # verify the tagging: $ aws ecs list-tags-for-resource \\ --resource-arn arn:aws:ecs:us-west-2:123456789102:task-definition/nginx:3 { \"tags\" : [ { \"key\" : \"some\" , \"value\" : \"thing\" } ] }","title":"ECS"},{"location":"containers/#eks","text":"To tag the EKS cluster arn:aws:eks:us-west-2:123456789102:cluster/somecluster with my=containers , use the following: 1 2 3 4 5 6 7 8 9 10 11 12 # tag: $ awsometag arn:aws:eks:us-west-2:123456789102:cluster/somecluster my = containers 2020 /01/05 08 :26:03 Tagging EKS cluster 'somecluster' in region 'us-west-1' with my:containers # verify the tagging: $ aws eks list-tags-for-resource \\ --resource-arn arn:aws:eks:us-west-1:123456789102:cluster/somecluster { \"tags\" : { \"my\" : \"containers\" } } Note In the same way you can tag clusters, you can tag managed node groups part of a cluster.","title":"EKS"},{"location":"fundamental/","text":"IAM \u00b6 If you want to tag the IAM user arn:aws:iam::123456789012:user/abc with nice=person and they=oweme then you'd want to use the following: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 # tag: $ awsometag arn:aws:iam::123456789012:user/abc \"nice=person, they=oweme\" # verify the tagging: $ aws iam list-user-tags \\ --user-name abc { \"Tags\" : [ { \"Key\" : \"nice\" , \"Value\" : \"person\" } , { \"Key\" : \"they\" , \"Value\" : \"oweme\" } ] , \"IsTruncated\" : false } Note In the same way you can tag IAM users, you can tag IAM roles. S3 \u00b6 To tag the bucket arn:aws:s3:::abucket with thats=cool you would use: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 # tag: $ awsometag arn:aws:s3:us-west-2::abucket thats = cool 2020 /01/04 13 :54:32 Tagging S3 bucket 'abucket' in region 'us-west-2' with thats:cool # verify the tagging: $ aws s3api get-bucket-tagging \\ --bucket abucket { \"TagSet\" : [ { \"Key\" : \"thats\" , \"Value\" : \"cool\" } ] } Warning If the S3 ARN does not contain the region, then you MUST provide the desired target region via the S3_ENDPOINT_REGION environment variable. For example, in above case it would be: S3_ENDPOINT_REGION=us-west-2 awsometag arn:aws:s3:::abucket us-west-2 thats=cool . Tagging works the same for objects in a bucket: let's tag the object with the key input.csv residing in the bucket abucket with this=aswell : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 # tag: $ S3_ENDPOINT_REGION = us-west-2 awsometag arn:aws:s3:::abucket/input.csv this = aswell 2020 /01/05 07 :03:50 Tagging S3 object 'input.csv' in bucket 'abucket' with this:aswell # verify the tagging: $ aws s3api get-object-tagging \\ --bucket abucket \\ --key input.csv { \"TagSet\" : [ { \"Key\" : \"this\" , \"Value\" : \"aswell\" } ] } Lambda \u00b6 To tag the Lambda function arn:aws:lambda:us-west-2:123456789102:function:coolapp-TheFunc-1234567 with server=less , use: 1 2 3 4 5 6 7 8 9 10 11 12 # tag: $ awsometag arn:aws:lambda:us-west-2:123456789102:function:coolapp-TheFunc-1234567 server = less 2020 /01/05 14 :16:47 Tagging Lambda function 'coolapp-TheFunc-1234567' in region 'us-west-2' with server:less # verify the tagging: $ aws lambda list-tags \\ --resource arn:aws:lambda:us-west-2:123456789102:function:coolapp-TheFunc-1234567 { \"Tags\" : { \"server\" : \"less\" } } DynamoDB \u00b6 To tag the DynamoDB table arn:aws:dynamodb:us-west-2:123456789102:table/TheTable with some=thing , use: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 # tag: $ awsometag arn:aws:dynamodb:us-west-2:123456789102:table/TheTable some = thing 2020 /01/06 05 :35:48 Tagging DynamoDB table 'TheTable' in region 'us-west-2' with some:thing # verify the tagging: $ aws dynamodb list-tags-of-resource \\ --resource-arn arn:aws:dynamodb:us-west-2:123456789102:table/TheTable { \"Tags\" : [ { \"Key\" : \"some\" , \"Value\" : \"thing\" } ] } EC2 \u00b6 To tag the EC2 instance arn:aws:ec2:us-west-2:123456789102:instance/i-123456789 with some=thing , use: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 # tag: $ awsometag arn:aws:ec2:us-west-2:123456789102:instance/i-123456789 some = thing 2020 /01/06 06 :15:42 Tagging EC2 resource 'i-123456789' of type 'instance' in region 'us-west-2' with some:thing # verify the tagging: $ aws ec2 describe-tags \\ --filters \"Name=resource-id,Values=i-123456789\" { \"Tags\" : [ { \"Key\" : \"some\" , \"ResourceId\" : \"i-123456789\" , \"ResourceType\" : \"instance\" , \"Value\" : \"thing\" } ] } EC2 resource IDs vs. ARNs The EC2 service defines a range of resources , from instances to volumes to VPCs. All of them are supported and you'll need to compose the ARNs yourself.","title":"Fundamental"},{"location":"fundamental/#iam","text":"If you want to tag the IAM user arn:aws:iam::123456789012:user/abc with nice=person and they=oweme then you'd want to use the following: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 # tag: $ awsometag arn:aws:iam::123456789012:user/abc \"nice=person, they=oweme\" # verify the tagging: $ aws iam list-user-tags \\ --user-name abc { \"Tags\" : [ { \"Key\" : \"nice\" , \"Value\" : \"person\" } , { \"Key\" : \"they\" , \"Value\" : \"oweme\" } ] , \"IsTruncated\" : false } Note In the same way you can tag IAM users, you can tag IAM roles.","title":"IAM"},{"location":"fundamental/#s3","text":"To tag the bucket arn:aws:s3:::abucket with thats=cool you would use: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 # tag: $ awsometag arn:aws:s3:us-west-2::abucket thats = cool 2020 /01/04 13 :54:32 Tagging S3 bucket 'abucket' in region 'us-west-2' with thats:cool # verify the tagging: $ aws s3api get-bucket-tagging \\ --bucket abucket { \"TagSet\" : [ { \"Key\" : \"thats\" , \"Value\" : \"cool\" } ] } Warning If the S3 ARN does not contain the region, then you MUST provide the desired target region via the S3_ENDPOINT_REGION environment variable. For example, in above case it would be: S3_ENDPOINT_REGION=us-west-2 awsometag arn:aws:s3:::abucket us-west-2 thats=cool . Tagging works the same for objects in a bucket: let's tag the object with the key input.csv residing in the bucket abucket with this=aswell : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 # tag: $ S3_ENDPOINT_REGION = us-west-2 awsometag arn:aws:s3:::abucket/input.csv this = aswell 2020 /01/05 07 :03:50 Tagging S3 object 'input.csv' in bucket 'abucket' with this:aswell # verify the tagging: $ aws s3api get-object-tagging \\ --bucket abucket \\ --key input.csv { \"TagSet\" : [ { \"Key\" : \"this\" , \"Value\" : \"aswell\" } ] }","title":"S3"},{"location":"fundamental/#lambda","text":"To tag the Lambda function arn:aws:lambda:us-west-2:123456789102:function:coolapp-TheFunc-1234567 with server=less , use: 1 2 3 4 5 6 7 8 9 10 11 12 # tag: $ awsometag arn:aws:lambda:us-west-2:123456789102:function:coolapp-TheFunc-1234567 server = less 2020 /01/05 14 :16:47 Tagging Lambda function 'coolapp-TheFunc-1234567' in region 'us-west-2' with server:less # verify the tagging: $ aws lambda list-tags \\ --resource arn:aws:lambda:us-west-2:123456789102:function:coolapp-TheFunc-1234567 { \"Tags\" : { \"server\" : \"less\" } }","title":"Lambda"},{"location":"fundamental/#dynamodb","text":"To tag the DynamoDB table arn:aws:dynamodb:us-west-2:123456789102:table/TheTable with some=thing , use: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 # tag: $ awsometag arn:aws:dynamodb:us-west-2:123456789102:table/TheTable some = thing 2020 /01/06 05 :35:48 Tagging DynamoDB table 'TheTable' in region 'us-west-2' with some:thing # verify the tagging: $ aws dynamodb list-tags-of-resource \\ --resource-arn arn:aws:dynamodb:us-west-2:123456789102:table/TheTable { \"Tags\" : [ { \"Key\" : \"some\" , \"Value\" : \"thing\" } ] }","title":"DynamoDB"},{"location":"fundamental/#ec2","text":"To tag the EC2 instance arn:aws:ec2:us-west-2:123456789102:instance/i-123456789 with some=thing , use: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 # tag: $ awsometag arn:aws:ec2:us-west-2:123456789102:instance/i-123456789 some = thing 2020 /01/06 06 :15:42 Tagging EC2 resource 'i-123456789' of type 'instance' in region 'us-west-2' with some:thing # verify the tagging: $ aws ec2 describe-tags \\ --filters \"Name=resource-id,Values=i-123456789\" { \"Tags\" : [ { \"Key\" : \"some\" , \"ResourceId\" : \"i-123456789\" , \"ResourceType\" : \"instance\" , \"Value\" : \"thing\" } ] } EC2 resource IDs vs. ARNs The EC2 service defines a range of resources , from instances to volumes to VPCs. All of them are supported and you'll need to compose the ARNs yourself.","title":"EC2"},{"location":"networking/","text":"ELB \u00b6 To tag the ALB arn:aws:elasticloadbalancing:us-west-2:123456789102:loadbalancer/app/my-test-alb/1234567890 with some=thing , use the following: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 # tag: $ awsometag arn:aws:elasticloadbalancing:us-west-2:123456789102:loadbalancer/app/my-test-alb/1234567890 some = thing 2020 /01/07 09 :08:09 Tagging load balancer 'my-test-alb' of type 'app' in region 'us-west-2' with some:thing # verify the tagging: $ aws elbv2 describe-tags \\ --resource-arns arn:aws:elasticloadbalancing:us-west-2:123456789102:loadbalancer/app/my-test-alb/1234567890 { \"TagDescriptions\" : [ { \"ResourceArn\" : \"arn:aws:elasticloadbalancing:us-west-2:123456789102:loadbalancer/app/my-test-alb/1234567890\" , \"Tags\" : [ { \"Key\" : \"some\" , \"Value\" : \"thing\" } ] } ] } Note In the same way that you can tag an ALB, you can tag an NLB. You can tell the difference in the type by looking at the ARN: loadbalancer/app vs loadbalancer/net . If you want to tag a classic LB, say my-test-clb , then you'd need to assemble the ARN yourself (based on region, account ID) since CLBs don't deal with ARNs explicitly. Then, use: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 # tag $ awsometag arn:aws:elasticloadbalancing:us-west-2:123456789102:loadbalancer/my-test-clb some = thing 2020 /01/07 11 :31:46 Tagging classic load balancer 'my-test-clb' in region 'us-west-2' with some:thing # verify the tagging: $ aws elb describe-tags \\ --load-balancer-names my-test-clb { \"TagDescriptions\" : [ { \"LoadBalancerName\" : \"my-test-clb\" , \"Tags\" : [ { \"Key\" : \"some\" , \"Value\" : \"thing\" } ] } ] } Tip The classic ELB (or: Classic Load Balancer, CLB for short) uses the API v1 , while \"next generation\" ELBs, that is, ALBs and NLBs, are using v2 of the API .","title":"Networking"},{"location":"networking/#elb","text":"To tag the ALB arn:aws:elasticloadbalancing:us-west-2:123456789102:loadbalancer/app/my-test-alb/1234567890 with some=thing , use the following: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 # tag: $ awsometag arn:aws:elasticloadbalancing:us-west-2:123456789102:loadbalancer/app/my-test-alb/1234567890 some = thing 2020 /01/07 09 :08:09 Tagging load balancer 'my-test-alb' of type 'app' in region 'us-west-2' with some:thing # verify the tagging: $ aws elbv2 describe-tags \\ --resource-arns arn:aws:elasticloadbalancing:us-west-2:123456789102:loadbalancer/app/my-test-alb/1234567890 { \"TagDescriptions\" : [ { \"ResourceArn\" : \"arn:aws:elasticloadbalancing:us-west-2:123456789102:loadbalancer/app/my-test-alb/1234567890\" , \"Tags\" : [ { \"Key\" : \"some\" , \"Value\" : \"thing\" } ] } ] } Note In the same way that you can tag an ALB, you can tag an NLB. You can tell the difference in the type by looking at the ARN: loadbalancer/app vs loadbalancer/net . If you want to tag a classic LB, say my-test-clb , then you'd need to assemble the ARN yourself (based on region, account ID) since CLBs don't deal with ARNs explicitly. Then, use: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 # tag $ awsometag arn:aws:elasticloadbalancing:us-west-2:123456789102:loadbalancer/my-test-clb some = thing 2020 /01/07 11 :31:46 Tagging classic load balancer 'my-test-clb' in region 'us-west-2' with some:thing # verify the tagging: $ aws elb describe-tags \\ --load-balancer-names my-test-clb { \"TagDescriptions\" : [ { \"LoadBalancerName\" : \"my-test-clb\" , \"Tags\" : [ { \"Key\" : \"some\" , \"Value\" : \"thing\" } ] } ] } Tip The classic ELB (or: Classic Load Balancer, CLB for short) uses the API v1 , while \"next generation\" ELBs, that is, ALBs and NLBs, are using v2 of the API .","title":"ELB"}]}